@model tblPreCommissioning
@{
    ViewBag.Title = "Manage Pre Commissioning";
}
<div class="page-header page-header-light">
    <div class="page-header-content header-elements-md-inline">
        <div class="page-title d-flex">
            <h4><i class="icon-arrow-left52 mr-2"></i> <span class="font-weight-semibold">Home</span> - Pre Commissioning</h4>
            <a href="#" class="header-elements-toggle text-default d-md-none"><i class="icon-more"></i></a>
        </div>
    </div>
    <div class="breadcrumb-line breadcrumb-line-light header-elements-md-inline">
        <div class="d-flex">
            <div class="breadcrumb">
                <a href="@Url.Action("Index","Home")" class="breadcrumb-item"><i class="icon-home2 mr-2"></i> Home</a>
                <span class="breadcrumb-item active">Manage Pre Commissioning</span>
            </div>
        </div>
    </div>
</div>

<div class="content">
    <div class="row">
        <div class="col-md-12">
            @using (Html.BeginForm("SaveModelData", "PreCommissioning", FormMethod.Post, new { @class = "form form-horizontal", @id = "validation-form" }))
            {
                @Html.ValidationSummary(true)
                <div class="card">
                    <div class="card-header header-elements-inline">
                        <h5 class="card-title"></h5>
                        <div class="col-lg-7 text-right">
                            @if (Model.PreCommissioningId > 0)
                            {
                                <input type="submit" class="btn btn-outline-primary legitRipple" value="Save" name="create" tabindex="15" />
                                @*if (Model.IsCommissioningDone == false)
                            {
                                <input type="button" class="btn btn-outline-primary legitRipple" value="Finalize Commissioning" onclick="onFinalizeC()" />
                            }*@
                            }
                            else
                            {
                                <input type="submit" class="btn btn-outline-primary legitRipple" value="Save & Continue" name="create" tabindex="15" />
                            }
                            <a href="@Url.Action("Index", "PreCommissioning")" class="btn btn-outline-primary legitRipple" tabindex="18">Back</a>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <div class="card-body">
                        @Html.HiddenFor(m => m.PreCommissioningId)
                        @Html.HiddenFor(m => m.CreatedBy)
                        @Html.HiddenFor(m => m.CreatedDate)
                        @Html.HiddenFor(m => m.IsCommissioningDone)
                        <div class="row">
                            <div class="col-lg-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.CustomerId, new { @class = "col-sm-6 col-lg-4 control-label" })
                                    <div class="col-sm-6 col-lg-9 controls">
                                        @(Html.Kendo().ComboBoxFor(m => m.CustomerId)
                                                      .Value(Model.CustomerId == 0 ? string.Empty : Model.CustomerId.ToString())
                                                      .Placeholder("--Select Customer --")
                                                      .DataTextField("CustomerName")
                                                      .DataValueField("CustomerId")
                                                      .HtmlAttributes(new { @tabindex = 1 })
                                                      .DataSource(source =>
                                                      {
                                                          source.Read(read =>
                                                          {
                                                              read.Action("GetCustomerList", "Common");
                                                          });
                                                      })
                                        )

                                        @Html.ValidationMessageFor(m => m.CustomerId)
                                    </div>
                                </div>
                            </div>

                            <div class="col-lg-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.ContactPersonId, new { @class = "col-sm-6 col-lg-4 control-label" })
                                    <div class="col-sm-6 col-lg-9 controls">
                                        @(Html.Kendo().ComboBoxFor(m => m.ContactPersonId)
                                                              .Value(Model.ContactPersonId == 0 ? string.Empty : Model.ContactPersonId.ToString())
                                                              .Placeholder("--Select Contact Person --")
                                                              .DataTextField("ContactPersonName")
                                                              .DataValueField("ContactPersonId")
                                                              .Enable(false)
                                                              .AutoBind(false)
                                                              .CascadeFrom("CustomerId")
                                                              .HtmlAttributes(new { @tabindex = 3 })
                                                              .DataSource(source =>
                                                              {
                                                                  source.Read(read =>
                                                                  {
                                                                      read.Action("GetCustomerContactPersonList", "Common").Data("filterContactPerson");
                                                                  }).ServerFiltering(true);
                                                              })
                                        )
                                        @Html.ValidationMessageFor(m => m.ContactPersonId)
                                    </div>
                                </div>

                                @*<div class="form-group">
                                @Html.LabelFor(m => m.DispatchDate, new { @class = "col-sm-6 col-lg-4 col-form-label" })
                                <div class="col-sm-6 col-lg-9">
                                    @Html.Kendo().DatePickerFor(m => m.DispatchDate).HtmlAttributes(new { @tabindex = 7 })
                                    @Html.ValidationMessageFor(m => m.DispatchDate)
                                </div>
                            </div>*@
                            </div>
                        </div>
                    </div>

                </div>
            }


            @if (Model.PreCommissioningId > 0)
            {
                <div class="card">
                    <div class="card-header header-elements-inline">
                        <h5 class="card-title">Dispatch Machine List</h5>
                    </div>
                    <div class="card-body">

                        @(Html.Kendo().Grid<tblPreCommissioningMachine>()
                                      .Name("gridPCMachine")
                                      .Columns(columns =>
                                      {
                                          columns.Command(command =>
                                          {
                                              command.Edit().Text(" ");
                                              command.Destroy().Text(" ");
                                          }).Title("Action").HtmlAttributes(WebHelper.ActionCenterColumnStyleWithCanEdit)
                                                     .HeaderHtmlAttributes(WebHelper.ActionCenterColumnStyleWithCanEdit);

                                          columns.Bound(d => d.DispatchDate).Format("{0:" + WebHelper.DateFormate + "}");
                                          columns.ForeignKey(d => d.MachineTypeId, (IEnumerable)ViewBag.MachineTypeList, "MachineTypeId", "MachineTypeName");
                                          columns.ForeignKey(d => d.MachineModeld, (IEnumerable)ViewBag.MachineModelList, "MachineModelId", "MachineName");
                                          columns.Bound(d => d.MachineSerialNo);
                                          columns.Bound(d => d.AHMNo);
                                      })
                                      .ToolBar(toolbar =>
                                      {
                                          if (AuthorizationHelper.CanAdd(ViewContext.RouteData.Values["Controller"].ToString()))
                                          {
                                              toolbar.Create().Text("Add");
                                          }
                                      })
                                      .Editable(editable =>
                                      {
                                          editable.Mode(GridEditMode.PopUp).TemplateName("tblPreCommissioningMachine");
                                          editable.DisplayDeleteConfirmation("Are you sure you want to delete this Pre Commissioning Machine?");
                                          editable.Window(x => x.Title("Manage Pre Commissioning Machine"));
                                      })
                                      .Pageable(x =>
                                      {
                                          x.Refresh(true);
                                          x.PageSizes(WebHelper.PageSizes);
                                      })
                                      .Sortable(sortable => sortable.AllowUnsort(false))
                                      .Filterable()
                                      .NoRecords()
                                      .Events(grid => grid.Edit("onEditMachine").Save("onSaveMachine"))
                                      .DataSource(dataSource => dataSource
                                          .Ajax()
                                          .ServerOperation(true)
                                          .PageSize(WebHelper.PageSize)
                                          .Model(model => model.Id(d => d.PCMachined))
                                          .Events(events => events.Error("onError(\"gridPCMachine\")"))
                                          .Create(update => update.Action("KendoSave", "PreCommissioningMachine"))
                                          .Read(read => read.Action("KendoRead", "PreCommissioningMachine").Data("additionalDataMachine"))
                                          .Update(update => update.Action("KendoSave", "PreCommissioningMachine"))
                                          .Destroy(update => update.Action("KendoDestroy", "PreCommissioningMachine"))
                                      ))
                    </div>
                </div>

                <div class="card">
                    <div class="card-header header-elements-inline">
                        <h5 class="card-title">Dispatch Accessories List</h5>
                    </div>
                    <div class="card-body">

                        @(Html.Kendo().Grid<tblPreCommissioningAccessories>()
                                                            .Name("gridPCAccessories")
                                                            .Columns(columns =>
                                                            {
                                                                columns.Command(command =>
                                                                {
                                                                    command.Edit().Text(" ");
                                                                    command.Destroy().Text(" ");
                                                                }).Title("Action").HtmlAttributes(WebHelper.ActionCenterColumnStyleWithCanEdit)
                                                                           .HeaderHtmlAttributes(WebHelper.ActionCenterColumnStyleWithCanEdit);

                                                                columns.Bound(d => d.DispatchDate).Format("{0:" + WebHelper.DateFormate + "}");
                                                                columns.ForeignKey(d => d.AccessoriesTypeId, (IEnumerable)ViewBag.AccessoriesTypeList, "AccessoriesTypeId", "AccessoriesTypeName");
                                                                columns.ForeignKey(d => d.MachineAccessoriesId, (IEnumerable)ViewBag.MachineAccessoriesList, "MachineAccessoriesId", "AccessoriesName");
                                                                columns.Bound(d => d.AccessoriesSerialNo);
                                                            })
                                                            .ToolBar(toolbar =>
                                                            {
                                                                if (AuthorizationHelper.CanAdd(ViewContext.RouteData.Values["Controller"].ToString()))
                                                                {
                                                                    toolbar.Create().Text("Add");
                                                                }
                                                            })
                                                            .Editable(editable =>
                                                            {
                                                                editable.Mode(GridEditMode.PopUp).TemplateName("tblPreCommissioningAccessories");
                                                                editable.DisplayDeleteConfirmation("Are you sure you want to delete this Pre Commissioning Accessories?");
                                                                editable.Window(x => x.Title("Manage Pre Commissioning Accessories"));
                                                            })
                                                            .Pageable(x =>
                                                            {
                                                                x.Refresh(true);
                                                                x.PageSizes(WebHelper.PageSizes);
                                                            })
                                                            .Sortable(sortable => sortable.AllowUnsort(false))
                                                            .Filterable()
                                                            .NoRecords()
                                                            .Events(grid => grid.Edit("onEditAccessory").Save("onSaveAccessory"))
                                                            .DataSource(dataSource => dataSource
                                                                .Ajax()
                                                                .ServerOperation(true)
                                                                .PageSize(WebHelper.PageSize)
                                                                .Model(model => model.Id(d => d.PCAccessoriesId))
                                                                .Events(events => events.Error("onError(\"gridPCAccessories\")"))
                                                                .Create(update => update.Action("KendoSave", "PreCommissioningAccessories"))
                                                                .Read(read => read.Action("KendoRead", "PreCommissioningAccessories").Data("additionalDataAccessori"))
                                                                .Update(update => update.Action("KendoSave", "PreCommissioningAccessories"))
                                                                .Destroy(update => update.Action("KendoDestroy", "PreCommissioningAccessories"))
                                                            ))
                    </div>
                </div>

                <div class="card">
                    <div class="card-header header-elements-inline">
                        <h5 class="card-title">Pre Commissioning Details</h5>
                    </div>
                    <div class="card-body">

                        @(Html.Kendo().Grid<GetPreCommisioningDetailData_Result>()
                                          .Name("gridPCDetail")
                                          .Columns(columns =>
                                          {
                                              columns.Command(command =>
                                              {
                                                  command.Edit().Text(" ");
                                                  command.Destroy().Text(" ");
                                                  command.Custom("FinalizeCommissining").Text("<span class='k-icon k-i-more-horizontal' title='Finalize Commissining'></span>").HtmlAttributes(new { @style = "margin:2px;", @id = "btnFQ" }).Click("onFinalizeC");
                                              }).Title("Action").HtmlAttributes(WebHelper.ActionCenterColumnStyleWithCanStatus)
                                                         .HeaderHtmlAttributes(WebHelper.ActionCenterColumnStyleWithCanStatus);


                                              columns.Bound(d => d.PreCommisoningDate).Format("{0:" + WebHelper.DateFormate + "}").Title("Date");
                                              columns.Bound(d => d.MachineName);
                                              columns.Bound(d => d.MachineSerialNo);
                                              columns.Bound(d => d.AccessoriesName);
                                              columns.Bound(d => d.AccessoriesSerialNo);
                                              columns.Bound(d => d.ServiceEngineer);
                                              columns.Bound(d => d.PrecommisioningRemark).Title("Remark");
                                              columns.Bound(d => d.IsCommisioning).Visible(true);

                                          })
                                          .ToolBar(toolbar =>
                                          {
                                              if (AuthorizationHelper.CanAdd(ViewContext.RouteData.Values["Controller"].ToString()))
                                              {
                                                  toolbar.Create().Text("Add");
                                              }
                                          })
                                          .Editable(editable =>
                                          {
                                              editable.Mode(GridEditMode.PopUp).TemplateName("tblPreCommissioningDetail");
                                              editable.DisplayDeleteConfirmation("Are you sure you want to delete this Pre Commissioning Detail?");
                                              editable.Window(x => x.Title("Manage Pre Commissioning Detail"));
                                          })
                                          .Pageable(x =>
                                          {
                                              x.Refresh(true);
                                              x.PageSizes(WebHelper.PageSizes);
                                          })
                                          .Sortable(sortable => sortable.AllowUnsort(false))
                                          .Filterable(e => e.Enabled(false))
                                          .NoRecords()
                                          .Events(grid => grid.Edit("onEdit").Save("onSave").DataBound("onDataBound"))
                                          .DataSource(dataSource => dataSource
                                              .Ajax()
                                              .ServerOperation(true)
                                              .PageSize(WebHelper.PageSize)
                                              .Events(e => e.RequestEnd("onDetailRequetEnd"))
                                              .Model(model => model.Id(d => d.PCDetailId))
                                              .Events(events => events.Error("onError(\"gridPCDetail\")"))
                                              .Create(update => update.Action("KendoSave", "PreCommissioningDetail"))
                                              .Read(read => read.Action("KendoRead", "PreCommissioningDetail").Data("additionalData"))
                                              .Update(update => update.Action("KendoSave", "PreCommissioningDetail"))
                                              .Destroy(update => update.Action("KendoDestroy", "PreCommissioningDetail"))
                                          ))
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<script type="text/javascript">
    var validator;

    function filterContactPerson(e) {
        return {
            CustomerId: getKendComboboxValue('CustomerId')
        };
    }

    function filterMachineType(e) {
        return {
            MachineTypeId: getKendComboboxValue('MachineTypeId')
        };
    }

    function filterDetailMachine(e) {
        return {
            PreCommissioningId: $("#PreCommissioningId").val()
        };
    }

    //function filterDetailAccessory(e) {
    //    return {
    //        PreCommissionId: $("#PreCommissioningId").val()
    //    };
    //}

    function additionalData(e) {
        return {
            PreCommissionId: $("#PreCommissioningId").val()
        };
    }

    function additionalDataMachine(e) {
        return {
            PreCommissioningId: $("#PreCommissioningId").val()
        };
    }

    function additionalDataAccessori(e) {
        return {
            PreCommissioningId: $("#PreCommissioningId").val()
        };
    }

    function onEdit(e) {
        debugger;
        if (e.model.isNew()) {
            var PreCommissioningId = getInputValueById('PreCommissioningId');
            e.model.set("PreCommissionId", PreCommissioningId);

            setKendComboboxValue('ServiceEngineerId', '');

            //Pre commissionning Date validation Based on dispatch Date & Last PreCommissioning Date
            //var preCommisoningDatepicker = $("#PreCommisoningDate").data("kendoDatePicker"),
            //    dispatchDate = getKendoDatePickerValue('DispatchDate')

            //var totalRows = $("#gridPCDetail").data("kendoGrid").dataSource.total();
            //if (totalRows > 1) {
            //    var grid = $("#gridPCDetail").data("kendoGrid").dataSource;
            //    var lastPreCDate = grid._data[1].PreCommisoningDate;
            //    if (lastPreCDate) {
            //        lastPreCDate = new Date(lastPreCDate);
            //        lastPreCDate.setDate(lastPreCDate.getDate() + 1);
            //        preCommisoningDatepicker.min(lastPreCDate);
            //        setKendoDatePickerValue('PreCommisoningDate', lastPreCDate);
            //    }
            //}
            //else {
            //    if (dispatchDate) {
            //        dispatchDate = new Date(dispatchDate);
            //        dispatchDate.setDate(dispatchDate.getDate() + 1);
            //        preCommisoningDatepicker.min(dispatchDate);
            //        setKendoDatePickerValue('PreCommisoningDate', dispatchDate);
            //    }
            //}

            validator = $("#myForm").kendoValidator({
                rules: {
                    PCMachineIdListRule: function (input) {
                        if (input.is("[name='PCMachineIdList']")) {
                            var pcMachineidlist = getKendoMultiSelectValue('PCMachineIdList');
                            var pcAccessoryidlist = getKendoMultiSelectValue('PCAccessoryIdList');
                            if (pcMachineidlist.length == 0 && pcAccessoryidlist.length == 0) {
                                return false;
                            }
                        }
                        return true;
                    }
                },
                messages: {
                    PCMachineIdListRule: "Please select atleast one Machine / Accessory"
                }
            }).data("kendoValidator");
        }
        else {
            var multiselect = $("#PCAccessoryIdList").data("kendoMultiSelect");
            var multiselect2 = $("#PCMachineIdList").data("kendoMultiSelect");
            multiselect.readonly();
            multiselect2.readonly();
        }
    }

    function onSave(e) {
        debugger;   
        if (e.model.isNew()) {
            if (!validator.validate()) {
                e.preventDefault();
            }
        }
        //var pcMachineidlist = getKendoMultiSelectValue('PCMachineIdList');
        //var pcAccessoryidlist = getKendoMultiSelectValue('PCAccessoryIdList');
        //if (pcMachineidlist.length == 0 && pcAccessoryidlist == 0) {
        //    ShowErrorMessage('Please select at least one Machine / Accessory');
        //    e.preventDefault();
        //    e.sender.cancelChanges(); 
            
        //}
        //else if (pcMachineidlist.length > 0 && pcAccessoryidlist > 0) {
        //    ShowErrorMessage('Please select Machine OR Accessory');
        //    e.sender.cancelChanges();
        //}
        //else {
        //    var PreCommissioningId = getInputValueById('PreCommissioningId');
        //    e.model.set("PreCommissionId", PreCommissioningId);
        //}
    }

    function onEditMachine(e) {
        if (e.model.isNew()) {
            e.model.set("PreCommissioningId", getInputValueById('PreCommissioningId'));
            setKendComboboxValue('MachineTypeId', '');
            setKendComboboxValue('MachineModeld', '');
        }
    }

    function onEditAccessory(e) {
        if (e.model.isNew()) {
            e.model.set("PreCommissioningId", getInputValueById('PreCommissioningId'));
            setKendComboboxValue('AccessoriesTypeId', '');
            setKendComboboxValue('MachineAccessoriesId', '');
        }
    }

    function onSaveAccessory(e) {
        var PreCommissioningId = getInputValueById('PreCommissioningId');
        e.model.set("PreCommissioningId", PreCommissioningId);
    }

    function onSaveMachine(e) {
        var PreCommissioningId = getInputValueById('PreCommissioningId');
        e.model.set("PreCommissioningId", PreCommissioningId);
    }

    function filterAccessoriesType(e) {
        return {
            AccessoriesTypeId: $("#AccessoriesTypeId").val()
        }
    }


    function onDetailRequetEnd(e) {
        if (!e.response.Errors) {
            var type = e.type;
            if (type === "update") {
                e.sender.read();
            }
            else if (type === "create") {
                window.location.reload();
            }
        }
    }

    function onFinalizeC(e) {
        bootbox.confirm('Are you sure you want to finalize this pre-commissioning?', function (result) {
            if (result === true) {
                e.preventDefault();
                var grid = $("#gridPCDetail").data("kendoGrid");
                var tr = $(e.target).closest("tr");
                var data = grid.dataItem(tr);
                var urllink = '@Url.Action("FinalizePreCommission", "Commissioning")';
                if (data != null)
                    window.location.href = urllink + "/" + data.PCDetailId;
            }
        }, 'popup-confirmation');
    }

    function onDataBound(e) {
        var grid = $("#gridPCDetail").data("kendoGrid");

        for (var i = 0; i < grid.columns.length; i++) {
            grid.autoFitColumn(i);
        }

        var gridData = grid.dataSource.view();
        for (var i = 0; i < gridData.length; i++) {
            var currentUid = gridData[i].uid;
            if (!gridData[i].IsLatest || gridData[i].IsCommisioning) {
                var currenRow = grid.table.find("tr[data-uid='" + currentUid + "']");
                var editButton = $(currenRow).find("#btnFQ");
                editButton.hide();
            }
        }
    }
</script>
