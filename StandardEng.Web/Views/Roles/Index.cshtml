@{
    ViewBag.Title = "Roles";
}

<div class="page-header page-header-light">
    <div class="page-header-content header-elements-md-inline">
        <div class="page-title d-flex">
            <h4><i class="icon-arrow-left52 mr-2"></i> <span class="font-weight-semibold">Home</span> - Masters</h4>
            <a href="#" class="header-elements-toggle text-default d-md-none"><i class="icon-more"></i></a>
        </div>
    </div>
    <div class="breadcrumb-line breadcrumb-line-light header-elements-md-inline">
        <div class="d-flex">
            <div class="breadcrumb">
                <a href="@Url.Action("Index","Home")" class="breadcrumb-item"><i class="icon-home2 mr-2"></i> Home</a>
                <span class="breadcrumb-item active">Masters - Roles</span>
            </div>
        </div>
    </div>
</div>
<div class="content">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header header-elements-inline">
                    <h5 class="card-title">Role List</h5>
                </div>
                <div class="card-body">

                    @(Html.Kendo().Grid<tblRole>()
                             .Name("grid")
                             .Columns(columns =>
                             {
                                 if (AuthorizationHelper.CanEditDelete(ViewContext.RouteData.Values["Controller"].ToString()))
                                 {
                                     columns.Command(command =>
                                     {
                                         if (AuthorizationHelper.CanEdit(ViewContext.RouteData.Values["Controller"].ToString()))
                                         {
                                             command.Edit().Text(" ").HtmlAttributes(new { @title = "Edit" });
                                         }
                                         if (AuthorizationHelper.CanDelete(ViewContext.RouteData.Values["Controller"].ToString()))
                                         {
                                             command.Destroy().Text(" ").HtmlAttributes(new { @title = "Delete" });
                                         }
                                         if (AuthorizationHelper.CanEdit(ViewContext.RouteData.Values["Controller"].ToString()))
                                         {
                                             command.Custom("Assign Rights").Click("assignRights").HtmlAttributes(new { @title = "Assign Rights" });
                                         }


                                     }).Title("Action").HtmlAttributes(WebHelper.ActionCenterColumnStyleWithCanEdit)
                                        .HeaderHtmlAttributes(WebHelper.ActionCenterColumnStyleWithCanEdit).Width(200);
                                 }
                                 columns.Bound(d => d.RoleId).Visible(false);
                                 columns.Bound(d => d.RoleName);
                                 columns.Bound(d => d.IsActive).Filterable(false)
                                                .ClientTemplate(Html.SetStatusClientTemplate("IsActive", "Roles", "ChangeStatus",
                                                "id=#= RoleId #", "#= RoleId #", "grid", "Role")).HtmlAttributes(WebHelper.StatusColumnStyle)
                                                .HeaderHtmlAttributes(WebHelper.StatusColumnStyle).Title("Change Status").Width(150);

                             })
                             .ToolBar(toolbar =>
                             {

                                 toolbar.Create().Text("Add").HtmlAttributes(new { @title = "Add" });

                             })
                             .Editable(editable =>
                             {
                                 editable.Mode(GridEditMode.PopUp);
                                 editable.DisplayDeleteConfirmation("Are you sure you want to delete this role?");
                                 editable.Window(x => x.Title("Manage role"));
                             })
                             .Pageable(x =>
                             {
                                 x.Refresh(true);
                                 x.PageSizes(WebHelper.PageSizes);
                             })
                             .Sortable(sortable => sortable.AllowUnsort(false))
                             .Filterable(f => f.Enabled(true))
                             .NoRecords()
                             .Events(grid => grid.Edit("edit"))
                             .DataSource(dataSource => dataSource
                                 .Ajax()
                                 .ServerOperation(true)
                                 .PageSize(WebHelper.PageSize)
                                 .Model(model => model.Id(d => d.RoleId))
                                 .Events(events => events.Error("onError(\"grid\")"))
                                 .Create(update => update.Action("KendoSave", "Roles"))
                                 .Read(read => read.Action("KendoRead", "Roles"))
                                 .Update(update => update.Action("KendoSave", "Roles"))
                                 .Destroy(update => update.Action("KendoDestroy", "Roles"))
                             ))
                </div>
            </div>
        </div>
    </div>
</div>

@(Html.Kendo().Window()
      .Name("myWindow")
      .Visible(false)
      .Draggable(true)
      .Modal(true)
      .Width(630)
      .Height(450)
      .Events(events => events.Activate("onActivate")))

<script type="text/javascript">

    function edit(e) {
        if (e.model.isNew()) {
            e.model.set("IsActive", true);
        }
        e.container.data('kendoWindow').bind('activate', function () {
            setFocusById('RoleName');
        });
    }

    function assignRights(e) {
        e.preventDefault();
        var tr = $(e.target).closest("tr");
        var data = this.dataItem(tr);
        var urllink = '@Url.Action("RoleMenusView", "Roles")';

        setLocalValue('RoleId', data.RoleId);

        var window = $("#myWindow").data("kendoWindow");
        window.content("");
        window.title("Assign Access Rights");
        window.refresh({
            url: urllink

        });

        window.center();
        window.open();

    }

    function additionalInfo() {
        return {
            roleId: getLocalValue('RoleId')
        };
    }

    function onActivate() {
        CheckAllView();
        CheckAllEdit();
        CheckAllAdd();
        CheckAllDelete();
        CheckAllStatusChange();
    }
</script>
