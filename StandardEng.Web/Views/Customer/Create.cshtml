@model tblCustomer
@{
    ViewBag.Title = "Manage Customer";
}
<div class="page-header page-header-light">
    <div class="page-header-content header-elements-md-inline">
        <div class="page-title d-flex">
            <h4><i class="icon-arrow-left52 mr-2"></i> <span class="font-weight-semibold">Home</span> - Customers</h4>
            <a href="#" class="header-elements-toggle text-default d-md-none"><i class="icon-more"></i></a>
        </div>
    </div>
    <div class="breadcrumb-line breadcrumb-line-light header-elements-md-inline">
        <div class="d-flex">
            <div class="breadcrumb">
                <a href="@Url.Action("Index","Home")" class="breadcrumb-item"><i class="icon-home2 mr-2"></i> Home</a>
                <span class="breadcrumb-item active">Manage Customers</span>
            </div>
        </div>
    </div>
</div>

<div class="content">
    <div class="row">
        <div class="col-md-12">
            @using (Html.BeginForm("SaveModelData", "Customer", FormMethod.Post, new { @class = "form form-horizontal", @id = "validation-form" }))
            {
                <div class="card">
                    <div class="card-header header-elements-inline">
                        <h5 class="card-title"></h5>
                        <div class="col-lg-7 text-right">
                            @if (AuthorizationHelper.CanEditDelete(ViewContext.RouteData.Values["Controller"].ToString()))
                            {
                                if (AuthorizationHelper.CanEdit(ViewContext.RouteData.Values["Controller"].ToString()))
                                {
                                    if (Model.CustomerId > 0)
                                    {
                                        <input type="submit" class="btn btn-outline-primary legitRipple" value="Save" name="create" tabindex="15" />
                                    }
                                    <input type="submit" class="btn btn-outline-primary legitRipple" value="Save & Continue" name="create" tabindex="15" />
                                    if (Model.CustomerId > 0)
                                    {
                                        <input type="submit" class="btn btn-outline-primary legitRipple" value="Save & New" name="create" tabindex="15" />
                                    }
                                }
                            }
                            <a href="@Url.Action("Index", "Customer")" class="btn btn-outline-primary legitRipple" tabindex="18">Back</a>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <d-iv class="card-body">
                        @Html.HiddenFor(m => m.CustomerId)

                        <div class="row">
                            <div class="col-lg-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.CustomerName, new { @class = "col-sm-6 col-lg-3 control-label" })
                                    <div class="col-sm-6 col-lg-9">
                                        @Html.Kendo().TextBoxFor(m => m.CustomerName).HtmlAttributes(new { @tabindex = 1 })
                                        @Html.ValidationMessageFor(m => m.CustomerName)
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(m => m.CountryId, new { @class = "col-sm-6 col-lg-3 control-label" })
                                    <div class="col-sm-6 col-lg-9 controls">
                                        @(Html.Kendo().ComboBoxFor(m => m.CountryId)
                                                                                   .Value(Model.CountryId == 0 ? string.Empty : Model.CountryId.ToString())
                                                                                   .Placeholder("--Select Country --")
                                                                                   .DataTextField("CountryName")
                                                                                   .DataValueField("CountryId")
                                                                                   .HtmlAttributes(new { @tabindex = 3 })
                                                                                   .DataSource(source =>
                                                                                   {
                                                                                       source.Read(read =>
                                                                                       {
                                                                                           read.Action("GetCountryList", "Common");
                                                                                       });
                                                                                   })
                                        )

                                        @Html.ValidationMessageFor(m => m.CountryId)
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(m => m.StateId, new { @class = "col-sm-6 col-lg-3 control-label" })
                                    <div class="col-sm-6 col-lg-9 controls">
                                        @(Html.Kendo().ComboBoxFor(m => m.StateId)
                                                                                          .Value(Model.StateId == 0 ? string.Empty : Model.StateId.ToString())
                                                                                          .Placeholder("--Select State --")
                                                                                          .DataTextField("StateName")
                                                                                          .DataValueField("StateId")
                                                                                          .Enable(false)
                                                                                          .AutoBind(false)
                                                                                          .CascadeFrom("CountryId")
                                                                                          .HtmlAttributes(new { @tabindex = 5 })
                                                                                          .DataSource(source =>
                                                                                          {
                                                                                              source.Read(read =>
                                                                                              {
                                                                                                  read.Action("GetStateList", "Common").Data("filterState");
                                                                                              }).ServerFiltering(true);
                                                                                          })
                                        )
                                        @Html.ValidationMessageFor(m => m.StateId)
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(m => m.CityId, new { @class = "col-sm-6 col-lg-3 control-label" })
                                    <div class="col-sm-6 col-lg-9 controls">
                                        @(Html.Kendo().ComboBoxFor(m => m.CityId)
                                                                                           .Value(Model.CityId == 0 ? string.Empty : Model.CityId.ToString())
                                                                                           .Placeholder("--Select City --")
                                                                                           .DataTextField("CityName")
                                                                                           .DataValueField("CityId")
                                                                                           .Enable(false)
                                                                                           .AutoBind(false)
                                                                                           .CascadeFrom("StateId")
                                                                                           .HtmlAttributes(new { @tabindex = 7 })
                                                                                           .DataSource(source =>
                                                                                           {
                                                                                               source.Read(read =>
                                                                                               {
                                                                                                   read.Action("GetCityList", "Common").Data("filterCity");
                                                                                               }).ServerFiltering(true);
                                                                                           })
                                        )

                                        @Html.ValidationMessageFor(m => m.CityId)
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(m => m.RegionId, new { @class = "col-sm-6 col-lg-3 control-label" })
                                    <div class="col-sm-6 col-lg-9 controls">
                                        @(Html.Kendo().ComboBoxFor(m => m.RegionId)
                                                              .Value(Model.RegionId == 0 ? string.Empty : Model.RegionId.ToString())
                                                              .Placeholder("--Select Region --")
                                                              .DataTextField("Name")
                                                              .DataValueField("Id")
                                                              .Enable(false)
                                                              .AutoBind(false)
                                                              .CascadeFrom("CityId")
                                                              .HtmlAttributes(new { @tabindex = 11 })
                                                              .DataSource(source =>
                                                              {
                                                                  source.Read(read =>
                                                                  {
                                                                      read.Action("GetRegionList", "Common").Data("filterRegion");
                                                                  }).ServerFiltering(true);
                                                              })
                                        )

                                        @Html.ValidationMessageFor(m => m.RegionId)
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(m => m.ContactNo, new { @class = "col-sm-6 col-lg-3 control-label" })
                                    <div class="col-sm-6 col-lg-9 controls">
                                        @Html.Kendo().TextBoxFor(m => m.ContactNo).HtmlAttributes(new { @tabindex = 9 })
                                        @Html.ValidationMessageFor(m => m.ContactNo)
                                    </div>
                                </div>



                                <div class="form-group">
                                    @Html.LabelFor(m => m.DefaultDiscount, new { @class = "col-sm-6 col-lg-4 control-label" })
                                    <div class="col-sm-6 col-lg-9 controls">
                                        @Html.Kendo().TextBoxFor(m => m.DefaultDiscount).HtmlAttributes(new { @tabindex = 11, @type = "number" })
                                        @Html.ValidationMessageFor(m => m.DefaultDiscount)
                                    </div>
                                </div>

                            </div>

                            <div class="col-lg-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Addressline1, new { @class = "col-sm-6 col-lg-3 control-label" })
                                    <div class="col-sm-6 col-lg-9 controls">
                                        @Html.Kendo().TextBoxFor(m => m.Addressline1).HtmlAttributes(new { @tabindex = 2 })
                                        @Html.ValidationMessageFor(m => m.Addressline1)
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Addressline2, new { @class = "col-sm-6 col-lg-3 control-label" })
                                    <div class="col-sm-6 col-lg-9 controls">
                                        @Html.Kendo().TextBoxFor(m => m.Addressline2).HtmlAttributes(new { @tabindex = 4 })
                                        @Html.ValidationMessageFor(m => m.Addressline2)
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.GST, new { @class = "col-sm-6 col-lg-3 control-label" })
                                    <div class="col-sm-6 col-lg-9 controls">
                                        @Html.Kendo().TextBoxFor(m => m.GST).HtmlAttributes(new { @tabindex = 6 })
                                        @Html.ValidationMessageFor(m => m.GST)
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Email, new { @class = "col-sm-6 col-lg-3 control-label" })
                                    <div class="col-sm-6 col-lg-9 controls">
                                        @Html.Kendo().TextBoxFor(m => m.Email).HtmlAttributes(new { @tabindex = 8, @type = "email" })
                                        @Html.ValidationMessageFor(m => m.Email)
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(m => m.AlternativeContactNo, new { @class = "col-sm-6 col-lg-4 control-label" })
                                    <div class="col-sm-6 col-lg-9 controls">
                                        @Html.Kendo().TextBoxFor(m => m.AlternativeContactNo).HtmlAttributes(new { @tabindex = 10 })
                                        @Html.ValidationMessageFor(m => m.AlternativeContactNo)
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(m => m.PinCode, new { @class = "col-sm-6 col-lg-4 control-label" })
                                    <div class="col-sm-6 col-lg-9 controls">
                                        @Html.Kendo().TextBoxFor(m => m.PinCode).HtmlAttributes(new { @tabindex = 12, @type = "number" })
                                        @Html.ValidationMessageFor(m => m.PinCode)
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(m => m.IsActive, new { @class = "col-sm-6 col-lg-3 control-label" })
                                    <div class="col-sm-6 col-lg-9 controls">
                                        @Html.CheckBoxFor(m => m.IsActive)
                                        @if (Model.IsActive)
                                        {
                                            @Html.Label("Active")
                                        }
                                        else
                                        {
                                            @Html.Label("In-Active")
                                        }

                                    </div>
                                </div>

                            </div>
                        </div>
                    </d-iv>


                </div>
            }


            @if (Model.CustomerId > 0)
            {
                <div class="card">
                    <div class="card-header header-elements-inline">
                        <h5 class="card-title">Customer Contact List</h5>
                    </div>
                    <div class="card-body">

                        @(Html.Kendo().Grid<tblCustomerContactPersons>()
                                                            .Name("gridCCPerson")
                                                      .Columns(columns =>
                                                      {
                                                          columns.Command(command =>
                                                                  {
                                                                      command.Edit().Text(" ");
                                                                      command.Destroy().Text(" ");
                                                                  }).Title("Action").HtmlAttributes(WebHelper.ActionCenterColumnStyleWithCanEdit)
                                                                     .HeaderHtmlAttributes(WebHelper.ActionCenterColumnStyleWithCanEdit);

                                                          columns.Bound(d => d.ContactPersonName);
                                                          columns.Bound(d => d.ContactPersonEmail);
                                                          columns.Bound(d => d.ContactNo);
                                                          columns.Bound(d => d.ContactPersonPosistion);
                                                      })
                                                      .ToolBar(toolbar =>
                                                      {
                                                          if (AuthorizationHelper.CanAdd(ViewContext.RouteData.Values["Controller"].ToString()))
                                                          {
                                                              toolbar.Create().Text("Add");
                                                          }
                                                      })
                                                      .Editable(editable =>
                                                      {
                                                          editable.Mode(GridEditMode.PopUp);
                                                          editable.DisplayDeleteConfirmation("Are you sure you want to delete this Contact Person?");
                                                          editable.Window(x => x.Title("Manage Contact Person"));
                                                      })
                                                      .Pageable(x =>
                                                      {
                                                          x.Refresh(true);
                                                          x.PageSizes(WebHelper.PageSizes);
                                                      })
                                                      .Sortable(sortable => sortable.AllowUnsort(false))
                                                      .Filterable()
                                                      .NoRecords()
                                                      .Events(grid => grid.Edit("onEdit").Save("onSave"))
                                                      .DataSource(dataSource => dataSource
                                                          .Ajax()
                                                          .ServerOperation(true)
                                                          .PageSize(WebHelper.PageSize)
                                                          .Model(model => model.Id(d => d.ContactPersonId))
                                                          .Events(events => events.Error("onError(\"gridCCPerson\")"))
                                                          .Create(update => update.Action("KendoSave", "ContactPerson"))
                                                          .Read(read => read.Action("KendoRead", "ContactPerson").Data("additionalData"))
                                                          .Update(update => update.Action("KendoSave", "ContactPerson"))
                                                          .Destroy(update => update.Action("KendoDestroy", "ContactPerson"))
                                                      ))
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<script type="text/javascript">
    function filterState() {
        return {
            CountryId: $("#CountryId").val()
        };
    }

    function filterCity() {
        return {
            CountryId: $("#CountryId").val(),
            StateId: $("#StateId").val()
        };
    }

    function filterRegion() {
        return {
            CityId: $("#CityId").val(),
        };
    }

    function additionalData(e) {
        return {
            CustomerId: $("#CustomerId").val()
        };
    }

    function onEdit(e) {
        if (e.model.isNew()) {
            var customerId = getInputValueById('CustomerId');
            e.model.set("CustomerId", customerId);
        }
    }

    function onSave(e) {
        var customerId = getInputValueById('CustomerId');
        e.model.set("CustomerId", customerId);
    }
</script>

